.ansible_deploy_default: &ansible_deploy_default
  #  stage: deploy
  image: toshiclick/ci-ansible
  before_script:
    - cd ansible
    - apt-get update && apt-get install -y sshpass
    - pip3 install paramiko
    - ansible-galaxy collection install -r requirements.yml --force-with-deps
    - ansible-galaxy install -r requirements.yml -p roles --force
    - bash ./ci.sh
  after_script:
    - rm -f ~/.ssh/id_rsa
    - rm -f ~/.ssh/.ansible_vault_pass

.ansible_network_deploy_default: &ansible_network_deploy_default
  image: toshiclick/home_network_ansible_image:latest
  before_script:
    - cd ansible
    - apt-get update && apt-get install -y sshpass
    - pip3 install paramiko jinja2
    - ansible-galaxy collection install -r requirements.yml --force-with-deps
    - ansible-galaxy install -r requirements.yml -p roles --force
    - bash ./ci.sh
  after_script:
    - rm -f ~/.ssh/id_rsa
    - rm -f ~/.ssh/.ansible_vault_pass

ansible_syntax:
  stage: lint
  <<: *ansible_deploy_default
  script:
    - ansible-playbook -i hosts_all.yml all.yml --syntax-check --vault-password-file ~/.ssh/.ansible_vault_pass -C
  only:
    # 実行されるブランチを指定(vault passはプロテクトブランチでしか取れないようにしているので。)
    refs:
      - main
    changes:
      - "ansible/**/*"
      - ".gitlab-ci.yml"
  except:
    - schedules

# 変数によって実行するサーバへデプロイ
# CIスケジュール画面でDINAMIC_DEPLOY_TARGETに適切なhostsを指定する必要あり
all_raspi_ansible:
  stage: deploy
  <<: *ansible_deploy_default
  script:
    # サーバへプレイブックを実行
    - ansible-playbook -D -l raspi -i hosts_all.yml all.yml --vault-password-file ~/.ssh/.ansible_vault_pass
  only:
    # 実行されるブランチを指定
    refs:
      - main
      - triggers
    variables:
      # 環境変数DINAMIC_RELEASE_FLAGがあるときだけ実行(スケジュールCI経由時だけ実行されるように)
      - $ALL_RASPI_RELEASE_FLAG

all_vm_ansible:
  stage: deploy
  <<: *ansible_deploy_default
  script:
    # サーバへプレイブックを実行
    - ansible-playbook -D -l dns -i hosts_all.yml all.yml --vault-password-file ~/.ssh/.ansible_vault_pass
  only:
    # 実行されるブランチを指定
    refs:
      - main
      - triggers
    variables:
      # 環境変数DINAMIC_RELEASE_FLAGがあるときだけ実行(スケジュールCI経由時だけ実行されるように)
      - $ALL_VM_RELEASE_FLAG

# サブCIサーバーに対してansible実行
ansible_execute_main_ci:
  <<: *ansible_deploy_default
  stage: deploy
  script:
    - ansible-playbook -D -l mayu -i hosts_all.yml all.yml --vault-password-file ~/.ssh/.ansible_vault_pass
  only:
    # 実行されるブランチを指定
    refs:
      - main
    variables:
      # 環境変数RELEASE_FLAGがあるときだけ実行(スケジュールCIのスタートボタンを押したときだけ実行されるように)
      - $RELEASE_MAIN_FLAG
  tags:
    # ここで指定したタグが付いているRunnerでのみ動く
    - mainCI

# メインCIサーバーに対してansible実行
ansible_excute_sub_ci:
  <<: *ansible_deploy_default
  stage: deploy
  script:
    - ansible-playbook -D -l shigure -i hosts_all.yml all.yml --vault-password-file ~/.ssh/.ansible_vault_pass -C
  only:
    # 実行されるブランチを指定
    refs:
      - main
    variables:
      # 環境変数RELEASE_FLAGがあるときだけ実行(スケジュールCIのスタートボタンを押したときだけ実行されるように)
      - $RELEASE_SUB_FLAG
  tags:
    # ここで指定したタグが付いているRunnerでのみ動く
    - subCI

excute_ansible_to_network:
  stage: deploy
  <<: *ansible_network_deploy_default
  script:
    # 機器へプレイブックを実行
    - ansible-playbook -l network_switch -i hosts_all.yml all.yml --vault-password-file ~/.ssh/.ansible_vault_pass
  only:
    # 実行されるブランチを指定
    refs:
      - main
      - triggers
    variables:
      # 環境変数RELEASE_FLAGがあるときだけ実行(スケジュールCI経由時だけ実行されるように)
      - $NETWORK_RELEASE_FLAG
